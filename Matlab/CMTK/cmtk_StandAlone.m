%% Transform tiff stack to RAS and save it as nrrd
clear all
imPath = '/home/ljp/Science/Projects/RLS/Data/2018-05-22/Run 01/Images/';
files = dir([imPath,'*.tif'])
for i = 1:length(files)
    ImStack(:,:,i) = imread([imPath,files(i).name])'; % !!! Why do I have to transpose to get the image orientation correct???
end
inMode  = 'ARI';
outMode = 'RAS';
[functionList, inversions, order] = getTransformation(inMode, outMode)
ImStack_transformed = applyTransformation(ImStack, functionList);
figure
imshow(ImStack_transformed(:,:,110)*10)

output = fullfile([imPath '1_TransformedToRAS.raw']);

fid = fopen(output, 'wb');
fwrite(fid,ImStack_transformed,'uint16')


output_header = fullfile([imPath '1_TransformedToRAS.nhdr']);
pixtype = 'uint16';
dimension = length(outMode)
space = outMode;
sizes = num2str(size(ImStack));

sizes = [num2str(size(ImStack,2)) ' ' num2str(size(ImStack,1)) ' ' num2str(size(ImStack,3))];

%sizes = [num2str(m.x) ' ' num2str(m.y) ' ' num2str(m.z) ' ' num2str(m.t)];

directions = sprintf('(%.02f,0,0) (0,%.02f,0) (0,0,%.02f)', 0.8, 0.8, 1);
units = sprintf(' "%s" "%s" "%s"','um', 'um', 'um' );
bin = [ './1_TransformedToRAS.raw'];

fid = fopen(output_header, 'w');
fprintf(fid, ...
    [...
    'NRRD0004\n' ...
    '# header generated by Matlab on %s\n' ...
    'type: %s\n' ...
    'dimension: %d\n'...
    'space: %s\n' ...
    'sizes: %s\n' ...
    'space directions: %s\n' ...
    'space units: %s\n'...
    'endian: little\n' ...
    'encoding: raw\n' ...
    'data file: %s\n' ...
    ],...
date,...
pixtype,...
dimension,...
space,...
sizes,...
directions,...
units,...
bin);


%% 
cd('/home/ljp/Science/Projects/RLS/RefBrains/');

% % zBrain cyto
% refPath = 'zBrain_Elavl3-GCaMP5G-158layers.nhdr' ;
% refBrainName = 'zBrain_Elavl3-GCaMP5G-158layers';

% LJP cyto
refPath = 'LJP_mean_refbrain_rotated180.nhdr' ;
refBrainName = 'LJP_mean_refbrain_rotated180';

% movPath = 'Run18_2018-05-22_stack_ras_maponZBrain_VB_RAS.nhdr';
% mov = 'Run18_2018-05-22_stack_ras_maponZBrain_VB_RAS';

movPath = 'Run22_2018-05-22_stack_RAS_NoEyes.nhdr';
mov = 'Run22_2018-05-22_stack_RAS_NoEyes';

% Affine transformation
transformation = autoTransName('affine', mov ,refBrainName)
outPath = fullfile([transformation '.xform']);

CMTK_affine(refPath, movPath, outPath); %%% call cmtk wrapper
%% Warp transformation
% get affine transformation to initial warp
transformation = autoTransName('affine', mov ,refBrainName)
initial = fullfile([transformation '.xform']);


transformation = autoTransName('warp', mov ,refBrainName)
outPath = fullfile( [transformation '.xform']);

CMTK_warp(refPath, movPath, outPath, initial); %%% call cmtk wrapper

%% reformat affine moving stack
transformation = autoTransName('affine', mov ,refBrainName)

[transformation, reformatedName] = autoTransName(transformation, mov, refBrainName);

transPath = fullfile( [transformation '.xform']);

outPath = fullfile( [reformatedName '.nrrd']);

CMTK_reformat(refPath, movPath, outPath, transPath); %%% call cmtk wrapper    

%% reformat warp moving stack
transformation = autoTransName('warp', mov ,refBrainName)
[transformation, reformatedName] = autoTransName(transformation, mov, refBrainName);
transPath = fullfile( [transformation '.xform']);

outPath = fullfile( [reformatedName '.nrrd']);

CMTK_reformat(refPath, movPath, outPath, transPath); %%% call cmtk wrapper    

%% Local functions


function [transformation, reformatedName] = autoTransName(transformation, mov, refBrainName)
% this function treats 'affine' and 'warp' as default cases

    switch transformation % detect default cases
        case 'affine' % search affine
            transformation = [ 'AFFINE_' mov '_TO_' refBrainName ];
            reformatedName = [ 'AFFINE_' mov '_ON_' refBrainName ];
        case 'warp' % search non-rigid
            transformation = [ 'WARP_' mov '_TO_' refBrainName ];
            reformatedName = [ 'WARP_' mov '_ON_' refBrainName ];
        otherwise % personal transformation
            % transformation does not change
            reformatedName = [ 'reformated-with_' transformation ];                
    end

end
