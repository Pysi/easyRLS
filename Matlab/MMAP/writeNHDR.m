function writeNHDR(F, tag)
%printNHDR prints a text nhdr file aside binary file

    m = Focused.Mmap(F, tag); % creates the Mmap object to make sure info can be loaded

    pixtype = m.pixtype;
    if strcmp(pixtype,'single');pixtype='float';end
    space = m.space;
    dimension = length(space);
    switch dimension
        case 3 % 3D
            sizes = [num2str(m.x) ' ' num2str(m.y) ' ' num2str(m.z)];
            directions = sprintf('(%.02f,0,0) (0,%.02f,0) (0,0,%.02f)', F.dx, F.dy, abs(F.param.Increment));
            units = sprintf('"%s" "%s" "%s"', F.units.dx, F.units.dy, F.units.z);
        case 4 % 4D
            sizes = [num2str(m.x) ' ' num2str(m.y) ' ' num2str(m.z) ' ' num2str(m.t)];
            directions = sprintf('(%.02f,0,0,0) (0,%.02f,0,0) (0,0,%.02f,0) (0,0,0,%.02f)',...
                F.dx, F.dy, abs(F.param.Increment), F.dt);
            units = sprintf('"%s" "%s" "%s" "%s"', F.units.dx, F.units.dy, F.units.z, F.units.t);
        otherwise
            error('case space = %s not implemented', space);
    end
    

    tmp = split(F.tag(tag), filesep); % get the tag
    tmp = tmp{end}; % takes only tag of filename
    bin = [ tmp '.bin']; % binary file (relative path)
    nhdr = [ F.tag(tag) '.nhdr']; % nhdr text file

    fid = fopen(nhdr, 'w');
    fprintf(fid, ...
        [...
        'NRRD0004\n' ...
        '# header generated by Matlab on %s\n' ...
        'type: %s\n' ...
        'dimension: %d\n'...
        'space: %s\n' ...
        'sizes: %s\n' ...
        'space directions: %s\n' ...
        'space units: %s\n'...
        'endian: little\n' ...
        'encoding: raw\n' ...
        'data file: %s\n' ...
        ],...
    date,...
    pixtype,...
    dimension,...
    space,...
    sizes,...
    directions,...
    units,...
    bin);

end